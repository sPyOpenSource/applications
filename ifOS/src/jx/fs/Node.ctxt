#BlueJ class context
comment0.target=Node
comment0.text=\n\ Portal\ interface\ to\ access\ the\ files\ and\ directories\ of\ the\ filesystem.\n
comment1.params=
comment1.target=Node\ getParent()
comment1.text=\n\ Liefert\ die\ &uuml;bergeordnete\ Inode\ (<code>parent</code>-Verzeichnis)\ zur&uuml;ck.\n\n\ @return\ die\ &uuml;bergeordnete\ Inode\n
comment10.params=
comment10.target=void\ putNode()
comment10.text=\n\ Gibt\ die\ Ressourcen,\ die\ von\ der\ Inode\ verwendet\ werden,\ frei\ (wird\ aufgerufen,\ wenn\ die\ Inode\n\ aus\ dem\ Cache\ entfernt\ wird).\ Die\ Inode\ auf\ der\ Partition\ wird\ nicht\ gel&ouml;scht,\ nur\ ihr\ Objekt\n\ im\ Speicher.\n
comment11.params=newChild\ name
comment11.target=void\ overlay(Node,\ java.lang.String)
comment11.text=\n\ &Uuml;berlagert\ die\ Inode\ des\ angegebenen\ Verzeichniseintrags\ mit\ der\ Inode\ eines\ anderen\ Dateisystems\n\ ("mount"-Mechanismus).\ Die\ Verdeckung\ der\ urspr&uuml;nglichen\ Inode\ findet\ nicht\ innerhalb\ des\ Dateisystems\ statt\n\ (an\ der\ physikalischen\ Struktur\ auf\ der\ Festplatte\ &auml;ndert\ sich\ nichts),\ sie\ wird\ durch\ die\ Methoden\ dieser\ Klasse\n\ und\ der\ <code>FS</code>-Klasse\ realisiert\ und\ bietet\ dadurch\ die\ M&ouml;glichkeit,\ mehrere\ Dateisysteme\ in\ einen\n\ Verzeichnisbaum\ "einzuh&auml;ngen".\ Jedesmal,\ wenn\ &uuml;ber\ die\ Methode\ <code>lookup</code>\ (weiter\ unten)\ auf\ die\ Inode\n\ mit\ dem\ Namen\ <code>name</code>\ zugegriffen\ wird,\ wird\ die\ Inode\ <code>newChild</code>\ zur&uuml;ckgeliefert.\n\n\ @param\ \ \ \ \ newChild\ die\ Inode,\ mit\ der\ der\ urspr&uuml;ngliche\ Eintrag\ &uuml;berlagert\ werden\ soll\n\ @param\ \ \ \ \ name\ \ \ \ \ der\ Name\ des\ Eintrags,\ der\ &uuml;berlagert\ werden\ soll\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ zu\ &uuml;berlagernde\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\n\ @see\ \ \ \ \ \ \ \#lookup(String\ name)\n
comment12.params=child
comment12.target=void\ removeOverlay(Node)
comment12.text=\n\ Entfernt\ die\ &Uuml;berlagerung\ durch\ die\ angegebene\ Inode.\n\n\ @param\ \ \ \ \ child\ die\ &uuml;berlagernde\ Inode,\ die\ entfernt\ werden\ soll\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ &uuml;berlagernde\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n
comment13.params=
comment13.target=void\ removeAllOverlays()
comment13.text=\n\ Entfernt\ alle\ vorhandenen\ &Uuml;berlagerungen.\n\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n
comment14.params=name
comment14.target=boolean\ isOverlayed(java.lang.String)
comment14.text=\n\ &Uuml;berpr&uuml;ft,\ ob\ der\ Eintrag\ mit\ dem\ angegebenen\ Namen\ von\ einem\ anderen\ Dateisystem\ &uuml;berlagert\ wird.\n\n\ @param\ \ \ \ \ name\ \ der\ Name\ des\ Eintrags,\ dessen\ Zustand\ ermittelt\ werden\ soll\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n
comment15.params=name
comment15.target=Node\ lookup(java.lang.String)
comment15.text=\n\ Liefert\ die\ Inode,\ die\ dem\ Verzeichniseintrag\ mit\ dem\ angegebenen\ Namen\ zugeordnet\ ist,\ sofern\ vorhanden.\ Zuerst\ wird\n\ der\ Name\ mit\ "\ .\ "\ und\ "\ ..\ "\ verglichen\ und\ bei\ &Uuml;bereinstimmung\ die\ Inode\ selbst\ (<code>this</code>)\ bzw.\ die\n\ &uuml;bergeordnete\ Inode\ (<code>parent</code>)\ zur&uuml;ckgeliefert.\ Als\ N&auml;chstes\ wird\ &uuml;berpr&uuml;ft,\ ob\ die\n\ Inode\ verdeckt\ wurde\ und\ eventuell\ die\ &uuml;berdeckende\ Inode\ zur&uuml;ckgegeben.\ Schlie&szlig;lich\ muss\ der\ Eintrag\n\ im\ Dateisystem\ gesucht\ werden,\ was\ &uuml;ber\ die\ abstrakte\ Funktion\ <code>getInode</code>\ geschieht.\n\n\ @param\ \ \ \ \ name\ der\ Name\ des\ Verzeichniseintrags,\ dessen\ Inode\ ermittelt\ werden\ soll\n\ @return\ \ \ \ die\ dem\ Verzeichniseintrag\ zugeordnete\ Inode\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ gew&uuml;nschte\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ einer\ Pfadkomponente\ die\ Operation\ nicht\ erlauben\n\ @throws\ jx.fs.NotExistException\n
comment16.params=
comment16.target=boolean\ isSymlink()
comment16.text=\n\ Testet,\ ob\ die\ Inode\ einen\ symbolischen\ Link\ repr&auml;sentiert.\n\n\ @return\ <code>true</code>,\ falls\ es\ sich\ um\ einen\ symbolischen\ Link\ handelt\n
comment17.params=
comment17.target=boolean\ isFile()
comment17.text=\n\ Testet,\ ob\ die\ Inode\ eine\ regul&auml;re\ Datei\ repr&auml;sentiert.\n\n\ @return\ <code>true</code>,\ falls\ es\ sich\ um\ eine\ Datei\ handelt\n
comment18.params=
comment18.target=boolean\ isDirectory()
comment18.text=\n\ Testet,\ ob\ die\ Inode\ ein\ Verzeichnis\ repr&auml;sentiert.\n\n\ @return\ <code>true</code>,\ falls\ es\ sich\ um\ ein\ Verzeichnis\ handelt\n
comment19.params=
comment19.target=boolean\ isWritable()
comment19.text=\n\ Testet,\ ob\ die\ Inode\ geschrieben\ werden\ kann.\n\n\ @return\ <code>true</code>,\ falls\ es\ sich\ um\ eine\ Datei\ handelt\ und\ in\ diese\ Datei\ geschrieben\ werden\ darf\n
comment2.params=parent
comment2.target=void\ setParent(Node)
comment2.text=\n\ Setzt\ die\ &uuml;bergeordnete\ Inode\ (<code>parent</code>-Verzeichnis).\n\n\ @param\ parent\ die\ &uuml;bergeordnete\ Inode\n
comment20.params=
comment20.target=boolean\ isReadable()
comment20.text=\n\ Testet,\ ob\ der\ Inhalt\ der\ Inode\ gelesen\ werden\ kann.\n\n\ @return\ <code>true</code>,\ falls\ es\ sich\ um\ eine\ Datei\ handelt\ und\ der\ Inhalt\ dieser\ Datei\ gelesen\ werden\ darf\n
comment21.params=
comment21.target=boolean\ isExecutable()
comment22.params=
comment22.target=int\ lastModified()
comment22.text=\n\ Liefert\ den\ Zeitpunkt\ der\ letzten\ &Auml;nderung\ zur&uuml;ck.\n\n\ @return\ den\ Zeitstempel\ der\ letzten\ &Auml;nderung\n
comment23.params=
comment23.target=int\ lastAccessed()
comment24.params=
comment24.target=int\ lastChanged()
comment25.params=time
comment25.target=void\ setLastModified(int)
comment26.params=time
comment26.target=void\ setLastAccessed(int)
comment27.params=
comment27.target=java.lang.String[]\ readdirNames()
comment27.text=\n\ Liest\ den\ Inhalt\ des\ durch\ diese\ Inode\ repr&auml;sentierten\ Verzeichnisses\ aus\ (auch\ die\ Eintr&auml;ge\ "\ .\ "\ und\ "\ ..\ ").\n\n\ @return\ ein\ <code>Vector</code>-Objekt,\ das\ die\ Namen\ der\ Dateien\ und\ Verzeichnisse\ enth&auml;lt\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n
comment28.params=name
comment28.target=Node\ getNode(java.lang.String)
comment28.text=\n\ Liefert\ die\ Inode,\ die\ dem\ Verzeichniseintrag\ mit\ dem\ angegebenen\ Namen\ zugeordnet\ ist\ (sofern\ vorhanden).\n\n\ @param\ \ \ \ \ name\ der\ Name\ des\ Verzeichniseintrags,\ dessen\ Inode\ ermittelt\ werden\ soll\n\ @return\ \ \ \ die\ dem\ Verzeichniseintrag\ zugeordnete\ Inode\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ gew&uuml;nschte\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\n
comment29.params=name\ mode
comment29.target=Node\ mkdir(java.lang.String,\ int)
comment29.text=\n\ Erzeugt\ ein\ neues\ Verzeichnis\ mit\ dem\ angegebenen\ Namen\ innerhalb\ des\ durch\ diese\ Inode\ dargestellten\ Verzeichnisses,\n\ sofern\ noch\ kein\ Eintrag\ mit\ diesem\ Namen\ vorhanden\ ist.\n\n\ @param\ name\ der\ Name\ des\ neuen\ Verzeichnisses\n\ @param\ mode\ die\ Zugriffsrechte\ des\ neuen\ Verzeichnisses\n\ @return\ die\ Inode\ des\ neu\ angelegten\ Verzeichnisses\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ eine\ Datei\ oder\ ein\ Verzeichnis\ mit\ diesem\ Namen\ bereits\ existiert\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment3.params=
comment3.target=boolean\ isDirty()
comment3.text=\n\ Ermittelt,\ ob\ die\ Inode\ noch\ geschrieben\ werden\ muss\ ("dirty").\n\n\ @return\ <code>true</code>,\ falls\ die\ Inode\ als\ "dirty"\ markiert\ ist\n
comment30.params=name
comment30.target=void\ rmdir(java.lang.String)
comment30.text=\n\ Entfernt\ das\ Verzeichnis\ mit\ dem\ angegebenen\ Namen\ aus\ dem\ durch\ diese\ Inode\ dargestellten\ Verzeichnis.\ Die\ Inode,\n\ die\ mit\ diesem\ Eintrag\ verkn&uuml;pft\ war,\ wird\ freigegeben.\n\n\ @param\ name\ der\ Name\ des\ zu\ l&ouml;schenden\ Verzeichnisses\n\ @exception\ DirNotEmptyException\ \ \ \ \ \ falls\ das\ zu\ l&ouml;schende\ Verzeichnis\ noch\ Dateien/Verzeichnisse\ enth&auml;lt\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ zu\ l&ouml;schende\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment31.params=name\ mode
comment31.target=Node\ create(java.lang.String,\ int)
comment31.text=\n\ Erzeugt\ einen\ neuen\ Verzeichniseintrag\ (eine\ neue\ Datei)\ mit\ dem\ angegebenen\ Namen\ innerhalb\ des\ durch\ diese\ Inode\n\ dargestellten\ Verzeichnisses.\n\n\ @param\ name\ der\ Name\ der\ neuen\ Datei\n\ @param\ mode\ die\ Zugriffsrechte\ der\ neuen\ Datei\n\ @return\ die\ Inode\ der\ neu\ angelegten\ Datei\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ eine\ Datei\ oder\ ein\ Verzeichnis\ mit\ diesem\ Namen\ bereits\ existiert\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment32.params=name
comment32.target=void\ unlink(java.lang.String)
comment32.text=\n\ Entfernt\ die\ Datei\ mit\ dem\ angegebenen\ Namen\ aus\ dem\ durch\ diese\ Inode\ dargestellten\ Verzeichnis.\ Die\ zu\ dem\ Eintrag\n\ geh&ouml;rende\ Inode\ wird\ freigegeben.\n\n\ @param\ name\ der\ Name\ der\ zu\ l&ouml;schenden\ Datei\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ zu\ l&ouml;schende\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ NoFileInodeException\ \ \ \ \ \ falls\ der\ zu\ l&ouml;schende\ Eintrag\ existiert,\ aber\ keine\ Datei\ ist\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment33.params=symname\ newname
comment33.target=Node\ symlink(java.lang.String,\ java.lang.String)
comment33.text=\n\ Erzeugt\ einen\ "symbolischen\ Link",\ einen\ Verweis\ auf\ einen\ Verzeichniseintrag.\ Von\ au&szlig;en\ ist\ zwischen\ Verweis\n\ und\ urspr&uuml;nglichen\ Eintrag\ kein\ Unterschied\ festzustellen.\n\n\ @param\ symname\ der\ Pfad,\ auf\ den\ ein\ Verweis\ angelegt\ werden\ soll\ (der\ Eintrag\ muss\ nicht\ existieren)\n\ @param\ newname\ der\ Name\ des\ Verweises\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ bereits\ ein\ Eintrag\ mit\ angegebenen\ Namen\ (<code>newname</code>)\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ existiert\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ NotSupportedException\ \ \ \ \ falls\ das\ Dateisystem\ diese\ Operation\ nicht\ unterst&uuml;tzt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment34.params=
comment34.target=java.lang.String\ getSymlink()
comment34.text=\n\ Liefert\ den\ Pfad\ der\ Inode,\ auf\ die\ der\ symbolische\ Link\ verweist.\n\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoSymlinkInodeException\ falls\ das\ Objekt\ keinen\ symbolischen\ Link\ darstellt\n\ @exception\ NotSupportedException\ \ \ falls\ das\ Dateisystem\ diese\ Operation\ nicht\ unterst&uuml;tzt\n\ @exception\ PermissionException\ \ \ \ \ falls\ die\ Zugriffsrechte\ des\ symbolischen\ Links\ die\ Operation\ nicht\ erlauben\n
comment35.params=oldname\ new_dir\ newname
comment35.target=void\ rename(java.lang.String,\ Node,\ java.lang.String)
comment35.text=\n\ Verschiebt\ die\ Inode\ des\ angegebenen\ Verzeichniseintrags\ bzw.\ &auml;ndert\ deren\ Namen.\n\n\ @param\ oldname\ der\ Name\ des\ Verzeichniseintrags,\ der\ verschoben\ bzw.\ umbenannt\ werden\ soll\n\ @param\ new_dir\ die\ Inode\ des\ Verzeichnisses,\ das\ den\ zu\ verschiebenden\ Verzeichniseintrag\ aufnehmen\ soll\n\ @param\ newname\ der\ neue\ Name\ des\ Verzeichniseintrags\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ die\ zu\ verschiebende\ Inode\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ es\ sich\ bei\ <code>new_dir</code>\ um\ ein\ anderes\ Dateisystem\ handelt,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Zugriffsrechte\ des\ Verzeichnisses\ die\ Operation\ nicht\ erlauben\ oder\ das\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n
comment36.params=mem\ off\ len
comment36.target=int\ read(jx.zero.Memory,\ int,\ int)
comment36.text=\n\ Liest\ den\ Inhalt\ der\ Datei.\n\n\ @param\ \ \ \ \ mem\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ der\ Puffer,\ der\ die\ zu\ lesenden\ Daten\ aufnehmen\ soll\n\ @param\ \ \ \ \ off\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ innerhalb\ der\ Datei,\ ab\ der\ gelesen\ werden\ soll\n\ @param\ \ \ \ \ len\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Anzahl\ zu\ lesender\ Byte\n\ @return\ \n\ @exception\ InodeIOException\ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ nicht\ um\ eine\ Datei\ handelt\ (Lesen\ eines\ Verzeichnisses\ ist\ nicht\ erlaubt)\n\ @exception\ PermissionException\ \ falls\ die\ Zugriffsrechte\ der\ Datei\ die\ Operation\ nicht\ erlauben\n\ @throws\ jx.fs.NotExistException\n
comment37.params=pos\ mem\ bufoff\ len
comment37.target=int\ read(int,\ jx.zero.Memory,\ int,\ int)
comment37.text=\n\ Liest\ den\ Inhalt\ der\ Datei.\n\n\ @param\ \ \ \ \ pos\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ innerhalb\ der\ Datei,\ ab\ der\ gelesen\ werden\ soll\n\ @param\ \ \ \ \ mem\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ der\ Puffer,\ der\ die\ zu\ lesenden\ Daten\ aufnehmen\ soll\n\ @param\ \ \ \ \ bufoff\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @param\ \ \ \ \ len\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Anzahl\ zu\ lesender\ Byte\n\ @return\ \n\ @exception\ InodeIOException\ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ nicht\ um\ eine\ Datei\ handelt\ (Lesen\ eines\ Verzeichnisses\ ist\ nicht\ erlaubt)\n\ @exception\ PermissionException\ \ falls\ die\ Zugriffsrechte\ der\ Datei\ die\ Operation\ nicht\ erlauben\n\ @throws\ jx.fs.NotExistException\n
comment38.params=off\ len
comment38.target=jx.zero.ReadOnlyMemory\ readWeak(int,\ int)
comment38.text=experimental\ method\ to\ get\ rid\ of\ memory\ copies
comment39.params=mem\ off\ len
comment39.target=int\ write(jx.zero.Memory,\ int,\ int)
comment39.text=\n\ Schreibt\ Daten\ in\ die\ Datei.\ Die\ Datei\ wird\ u.U.\ vergr&ouml;&szlig;ert.\n\n\ @param\ \ \ \ \ mem\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ der\ Puffer,\ der\ die\ zu\ schreibenden\ Daten\ enth&auml;lt\n\ @param\ \ \ \ \ off\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ innerhalb\ der\ Datei,\ ab\ der\ geschrieben\ werden\ soll\n\ @param\ \ \ \ \ len\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Anzahl\ zu\ schreibender\ Byte\n\ @exception\ InodeIOException\ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ nicht\ um\ eine\ Datei\ handelt\ (Lesen\ eines\ Verzeichnisses\ ist\ nicht\ erlaubt)\n\ @exception\ PermissionException\ \ falls\ die\ Zugriffsrechte\ der\ Datei\ die\ Operation\ nicht\ erlauben\ oder\ das\ Dateisystem\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ als\ nur\ lesbar\ angemeldet\ wurde\n
comment4.params=value
comment4.target=void\ setDirty(boolean)
comment4.text=\n\ Legt\ fest,\ ob\ die\ Inode\ noch\ geschrieben\ werden\ muss\ oder\ ob\ die\ Version\n\ auf\ der\ Partition\ mit\ dem\ Speicherobjekt\ &uuml;bereinstimmt.\n\n\ @param\ value\ neue\ Zustand\ der\ Inode\ (<code>true</code>\ f&uuml;r\ "dirty")\n
comment40.params=pos\ mem\ bufoff\ len
comment40.target=int\ write(int,\ jx.zero.Memory,\ int,\ int)
comment40.text=\n\ Schreibt\ Daten\ in\ die\ Datei.\ Die\ Datei\ wird\ u.U.\ vergr&ouml;&szlig;ert.\n\n\ @param\ \ \ \ \ pos\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ innerhalb\ der\ Datei,\ ab\ der\ geschrieben\ werden\ soll\ \ \ \ \n\ @param\ \ \ \ \ mem\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ der\ Puffer,\ der\ die\ zu\ schreibenden\ Daten\ enth&auml;lt\n\ @param\ \ \ \ \ bufoff\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Position\ innerhalb\ der\ Datei,\ ab\ der\ geschrieben\ werden\ soll\n\ @param\ \ \ \ \ len\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ die\ Anzahl\ zu\ schreibender\ Byte\n\ @exception\ InodeIOException\ \ \ \ \ falls\ bei\ der\ Ein-/Ausgabe\ ein\ Fehler\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ nicht\ um\ eine\ Datei\ handelt\ (Lesen\ eines\ Verzeichnisses\ ist\ nicht\ erlaubt)\n\ @exception\ PermissionException\ \ falls\ die\ Zugriffsrechte\ der\ Datei\ die\ Operation\ nicht\ erlauben\ oder\ das\ Dateisystem\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ als\ nur\ lesbar\ angemeldet\ wurde\n
comment41.params=
comment41.target=int\ available()
comment41.text=\n\ Liefert\ den\ freien\ Platz\ (in\ Byte)\ auf\ der\ Partition,\ die\ die\ Inode\ enth&auml;lt,\ zur&uuml;ck.\n
comment42.params=
comment42.target=int\ getLength()
comment42.text=\n\ Liefert\ die\ Gr&ouml;&szlig;e\ des\ von\ der\ Inode\ belegten\ Bereichs\ auf\ der\ Partition\ zur&uuml;ck.\n
comment43.params=
comment43.target=int\ getIdentifier()
comment43.text=\n\ Returns\ an\ identifier\ that\ allows\ to\ locate\ the\ inode\ without\ using\ the\ inode\ object\n
comment44.params=
comment44.target=int\ getVersion()
comment45.params=
comment45.target=FileSystem\ getFileSystem()
comment45.text=\n\ Returns\ the\ file\ system\ this\ inode\ belongs\ to\n
comment46.params=
comment46.target=StatFS\ getStatFS()
comment5.params=
comment5.target=void\ incUseCount()
comment5.text=\n\ Erhht\ den\ usecount\ der\ Inode.\n
comment6.params=
comment6.target=void\ decUseCount()
comment6.text=\n\ Gibt\ die\ Inode\ frei.\ Dem\ Cache\ wird\ mitgeteilt,\ dass\ die\ Inode\ nicht\ mehr\ verwendet\ wird.\n
comment7.params=
comment7.target=int\ i_nlinks()
comment7.text=\n\ Liefert\ die\ Anzahl\ der\ Verweise\ auf\ die\ Inode\ zur&uuml;ck.\ Bei\ einem\ Verzeichnis\ ist\ die\ Anzahl\ der\ Verweise\ gleich\ der\n\ Anzahl\ an\ Verzeichnissen,\ die\ darin\ enthalten\ sind\ (also\ mindestens\ 2\ f&uuml;r\ "\ .\ "\ und\ "\ ..\ ").\ Weiterhin\ erh&ouml;ht\n\ jeder\ symbolische\ Link\ auf\ die\ Inode\ die\ Zahl\ der\ Verweise.\n
comment8.params=
comment8.target=void\ deleteNode()
comment8.text=\n\ L&ouml;scht\ die\ Inode\ (notwendig\ bei\ den\ Kommandos\ <code>unlink</code>\ und\ <code>rmdir</code>).\n
comment9.params=
comment9.target=void\ writeNode()
comment9.text=\n\ Schreibt\ &Aauml;nderungen,\ die\ an\ der\ Inode\ vorgenommen\ wurden,\ auf\ die\ Partition.\n
numComments=47
