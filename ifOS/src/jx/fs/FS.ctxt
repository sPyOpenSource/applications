#BlueJ class context
comment0.target=FS
comment0.text=\n\ This\ class\ represents\ the\ interface\ of\ the\ file\ system\ to\ the\ application\ layer.\ It\ contains\ basic\ methods\n\ Execute\ file\ system\ operations\ (similar\ to\ the\ system\ calls\ in\ a\ Unix\ file\ system).\ These\ include\:\n\ <code>\ cd\ </code>,\ <code>\ mkdir\ </code>,\ <code>\ rmdir\ </code>,\ <code>\ create\ </code>,\ <code>\ unlink\ </code>,\ <code>\ rename\ </code>\n\ <code>\ symlink\ </code>,\ <code>\ read\ </code>\ and\ <code>\ write\ </code>.\n\ <p>\n\ The\ difference\ to\ the\ equivalent\ commands\ of\ the\ class\ <code>\ Inode\ </code>\ is\ that\ here\ file\ system-wide\ paths\n\ can\ be\ used\ and\ not\ addressed\ within\ a\ directory\ inode.\ Here\ happens\n\ So\ the\ translation\ of\ commands\ to\ paths\ in\ method\ calls\ of\ inode\ objects.\ This\ will\ be\ a\ current\ directory\n\ included.\ Should\ e.g.\ the\ command\ <code>\ mkdir\ /\ usr\ /\ local\ /\ bin\ </code>\ will\ be\ executed\ in\ the\ inode\ of\ the\n\ Root\ directory\ (which\ is\ always\ known\ to\ the\ class)\ looking\ for\ the\ entry\ "usr"\ whose\ inode\ loaded\ in\ this\n\ Inode\ searched\ for\ the\ entry\ "local"\ and\ called\ the\ method\ <code>\ mkdir\ (bin)\ </code>\ in\ the\ corresponding\ inode.\n\ Two\ inodes\ are\ stored\ permanently\:\ those\ of\ the\ root\ directory\ and\ those\ of\ the\ current\ directory\ together\ with\n\ her\ path.\ In\ the\ following,\ only\ the\ methods\ that\ do\ not\ exist\ in\ the\ <code>\ Inode\ </code>\ class\ will\ be\ discussed\n\ These\ are\ essentially\ due\ to\ a\ decomposition\ of\ the\ path\ and\ invocation\ of\ the\ corresponding\ methods\ in\ the\ inode\ of\ the\n\ File\ names\ exist.\n
comment1.params=
comment1.target=java.lang.String\ getCwdPath()
comment1.text=\n\ Liefert\ den\ Pfad\ des\ aktuellen\ Verzeichnisses\ ("current\ working\ directory").\n\n\ @return\ der\ absolute\ Pfad\ des\ aktuellen\ Verzeichnisses\n
comment10.params=path\ pathneu
comment10.target=void\ symlink(java.lang.String,\ java.lang.String)
comment10.text=\n\ Legt\ einen\ symbolischen\ Link\ an,\ der\ auf\ den\ angegebenen\ Pfad\ verweist.\n\n\ @param\ path\ \ \ \ der\ Verzeichniseintrag,\ auf\ den\ verwiesen\ werden\ soll\n\ @param\ pathneu\ der\ Pfad\ des\ anzulegenden\ symbolischen\ Links\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ der\ Pfad\ des\ symbolischen\ Links\ bereits\ existiert\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ der\ Verzeichniseintrag\ (und\ damit\ die\ Inode)\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ Pfad\ zur\ Datei/zum\ Verzeichnis\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.NotSupportedException\n\ @throws\ jx.fs.PermissionException\n
comment11.params=path\ mode
comment11.target=void\ mkdir(java.lang.String,\ int)
comment11.text=\n\ Erzeugt\ ein\ neues\ Verzeichnis\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfad\ des\ neuen\ Verzeichnisses\n\ @param\ mode\ die\ Zugriffsrechte\ des\ neuen\ Verzeichnisses\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ eine\ Datei/ein\ Verzeichnis\ mit\ diesem\ Pfad\ bereits\ existiert.\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ das\ Verzeichnis,\ das\ das\ neue\ Verzeichnis\ aufnehmen\ soll,\ nicht\ gefunden\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ Pfad\ zum\ Verzeichnis\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment12.params=path
comment12.target=void\ rmdir(java.lang.String)
comment12.text=\n\ Entfernt\ das\ Verzeichnis\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfad\ des\ zu\ l&ouml;schenden\ Verzeichnisses\n\ @exception\ DirNotEmptyException\ \ \ \ \ \ falls\ das\ zu\ l&ouml;schende\ Verzeichnis\ nicht\ leer\ ist\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ das\ Verzeichnis,\ das\ das\ zu\ l&ouml;schende\ Verzeichnis\ enthalten\ soll,\ nicht\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ Pfad\ zum\ Verzeichnis\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment13.params=path\ mode
comment13.target=void\ create(java.lang.String,\ int)
comment13.text=\n\ Erzeugt\ eine\ neue\ Datei\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfad\ der\ neuen\ Datei\n\ @param\ mode\ die\ Zugriffsrechte\ der\ neuen\ Datei\n\ @exception\ FileExistsException\ \ \ \ \ \ \ falls\ eine\ Datei/ein\ Verzeichnis\ mit\ diesem\ Pfad\ bereits\ existiert\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ das\ Verzeichnis,\ das\ die\ neue\ Datei\ aufnehmen\ soll,\ nicht\ gefunden\ werden\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ Pfad\ zur\ Datei\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment14.params=path
comment14.target=void\ unlink(java.lang.String)
comment14.text=\n\ Entfernt\ die\ Datei\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfad\ der\ zu\ l&ouml;schenden\ Datei\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ das\ Verzeichnis,\ das\ die\ zu\ l&ouml;schende\ Datei\ enthalten\ soll,\ nicht\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ Pfad\ zur\ Datei\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @throws\ jx.fs.NoFileInodeException\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment15.params=path
comment15.target=java.lang.String\ getPathName(java.lang.String)
comment15.text=\n\ Liefert\ das\ &uuml;bergeordnete\ Verzeichnis\ zum\ angegebenen\ Pfadnamen.\ Falls\ der\ Pfadname\ keine\ Pfadkomponenten\ enth&auml;lt,\n\ wird\ der\ Pfad\ des\ aktuellen\ Verzeichnisses\ zur&uuml;ckgegeben.\n\n\ @param\ path\ der\ Pfadname,\ dessen\ &uuml;bergeordnetes\ Verzeichnis\ zur&uuml;ckgegeben\ werden\ soll\n\ @return\ der\ Pfad\ des\ &uuml;bergeordneten\ Verzeichnisses\n
comment16.params=path
comment16.target=java.lang.String\ getFileName(java.lang.String)
comment16.text=\n\ Liefert\ den\ Datei-\ bzw.\ Verzeichnisnamen\ auf\ den\ der\ angegebene\ Pfad\ zeigt.\ Falls\ der\ Pfadname\ keine\ Pfadkomponenten\n\ enth&auml;lt,\ wird\ er\ unver&auml;ndert\ zur&uuml;ckgegeben.\n\n\ @param\ path\ der\ Pfadname,\ der\ zerlegt\ werden\ soll\n\ @return\ der\ Datei-\ oder\ Verzeichnisname,\ auf\ den\ der\ Pfad\ zeigt\n
comment17.params=path
comment17.target=Node\ lookup(java.lang.String)
comment17.text=\n\ Liefert\ die\ Inode\ zum\ angegebenen\ Pfad\ zur&uuml;ck.\ Repr&auml;sentiert\ die\ Inode\ einen\ symbolischen\ Link,\ wird\ dieser\n\ verfolgt\ und\ die\ Inode,\ auf\ die\ sich\ der\ Verweis\ bezieht,\ zur&uuml;ckgegeben.\n\n\ @param\ \ \ \ \ path\ der\ Pfad,\ dessen\ zugeordnete\ Inode\ zur&uuml;ckgegeben\ werden\ soll\n\ @return\ \ \ \ die\ Inode\ des\ durch\ den\ angegebenen\ Pfad\ bezeichneten\ Verzeichniseintrags\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ der\ Verzeichniseintrag\ (und\ damit\ die\ Inode)\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ einem\ Teil\ des\ Pfades,\ auf\ den\ ein\ "\ /\ "\ folgt,\ nicht\ um\ ein\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment18.params=path\ m\ off\ len
comment18.target=int\ read(java.lang.String,\ jx.zero.Memory,\ int,\ int)
comment18.text=\n\ Liest\ den\ Inhalt\ der\ Datei\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfadname\ der\ zu\ lesenden\ Datei\n\ @param\ m\ \ \ \ das\ Byte-Array,\ das\ den\ Dateiinhalt\ aufnehmen\ soll\n\ @param\ off\ \ der\ Offset\ innerhalb\ der\ Datei\n\ @param\ len\ \ die\ Anzahl\ zu\ lesender\ Byte\n\ @return\ die\ Anzahl\ tats&auml;chlich\ gelesener\ Byte\n\ @exception\ InodeIOException\ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ bei\ dem\ angegebenen\ Pfad\ nicht\ um\ eine\ Datei\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment19.params=path\ m\ off\ len
comment19.target=int\ write(java.lang.String,\ jx.zero.Memory,\ int,\ int)
comment19.text=\n\ Schreibt\ den\ Inhalt\ des\ Byte-Arrays\ in\ die\ Datei\ mit\ dem\ angegebenen\ Pfadnamen.\n\n\ @param\ path\ der\ Pfadname\ der\ Datei,\ deren\ Inhalt\ ge&auml;ndert\ werden\ soll\n\ @param\ m\ \ \ \ das\ Byte-Array,\ das\ die\ zu\ schreibenden\ Daten\ enth&auml;lt\n\ @param\ off\ \ der\ Offset\ innerhalb\ der\ Datei\n\ @param\ len\ \ die\ Anzahl\ zu\ schreibender\ Byte\n\ @return\ die\ Anzahl\ tats&auml;chlich\ geschriebener\ Byte\n\ @exception\ InodeIOException\ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ NoFileInodeException\ falls\ es\ sich\ bei\ dem\ angegebenen\ Pfad\ nicht\ um\ eine\ Datei\ handelt\n\ @exception\ PermissionException\ \ falls\ das\ Dateisystem\ als\ nur\ lesbar\ angemeldet\ wurde\n\ @throws\ jx.fs.NotExistException\n
comment2.params=
comment2.target=Node\ getCwdNode()
comment2.text=\n\ Liefert\ die\ Inode,\ die\ dem\ aktuellen\ Verzeichnis\ zugeordnet\ ist.\n\n\ @return\ die\ Inode\ des\ aktuellen\ Verzeichnisses\n
comment20.params=deviceIdentifier\ fileIdentifier
comment20.target=Node\ getNode(int,\ int)
comment21.params=name
comment21.target=boolean\ isPath(java.lang.String)
comment22.params=name
comment22.target=boolean\ isAbsolute(java.lang.String)
comment3.params=
comment3.target=void\ cleanUp()
comment3.text=\n\ Gibt\ belegte\ Ressourcen\ frei\ und\ beendet\ Threads\ des\ Dateisystem.\ Diese\ Methode\ ist\ f&uuml;r\ das\ "Herunterfahren"\ des\n\ Systems\ gedacht;\ nach\ <code>cleanUp</code>\ sollte\ nicht\ mehr\ auf\ das\ Dateisystem\ zugegriffen\ werden.\n\ @throws\ jx.fs.InodeIOException\n\ @throws\ jx.fs.NotExistException\n
comment4.params=filesystem\ path\ read_only
comment4.target=void\ mount(FileSystem,\ java.lang.String,\ boolean)
comment4.text=\n\ H&auml;ngt\ ein\ Dateisystem\ in\ den\ Verzeichnisbaum\ ein,\ indem\ eine\ Inode\ durch\ die\ Wurzelinode\ des\n\ Dateisystems\ &uuml;berlagert\ wird.\ Die\ Wurzelinode\ ist\ unter\ dem\ angegebenen\ Namen\ ansprechbar.\n\n\ @param\ \ \ \ \ filesystem\ das\ Dateisystem,\ das\ angemeldet\ werden\ soll\n\ @param\ \ \ \ \ path\ \ \ \ \ \ \ der\ Pfad,\ unter\ dem\ das\ einzuh&auml;ngende\ Dateisystem\ erreichbar\ sein\ soll.\ Die\ Inode,\ die\ durch\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ diesen\ Pfad\ repr&auml;sentiert\ wird,\ wird\ &uuml;berlagert.\n\ @param\ \ \ \ \ read_only\ \ falls\ <code>true</code>,\ kann\ auf\ die\ Partition\ nur\ lesend\ zugegriffen\ werden\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ der\ Verzeichniseintrag\ (und\ damit\ die\ Inode)\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ zu\ &uuml;berlagernden\ Verzeichniseintrag\ nicht\ um\ ein\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n\ @throws\ jx.fs.PermissionException\n
comment5.params=filesystem
comment5.target=void\ unmount(FileSystem)
comment5.text=\n\ Entfernt\ ein\ Dateisystem\ aus\ dem\ Verzeichnisbaum.\ Die\ Inode,\ die\ durch\ die\ Wurzelinode\ des\n\ Dateisystems\ &uuml;berlagert\ war,\ wird\ dadurch\ wieder\ zug&auml;nglich.\n\n\ @param\ \ \ \ \ filesystem\ das\ Dateisystem,\ das\ abgemeldet\ werden\ soll\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ der\ Verzeichniseintrag\ (und\ damit\ die\ Inode)\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ bei\ dem\ &uuml;berlagerten\ Verzeichniseintrag\ nicht\ um\ ein\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Verzeichnis\ handelt\n\ @throws\ jx.fs.NotExistException\n
comment6.params=filesystem\ read_only
comment6.target=void\ mountRoot(FileSystem,\ boolean)
comment6.text=\n\ Initialisiert\ das\ angegebene\ Dateisystem\ als\ Root-Dateisystem.\ Setzt\ das\ Wurzelverzeichnis\ und\ das\ aktuelle\ Verzeichnis\n\ auf\ die\ Root-Inode\ des\ Dateisystems,\ den\ Pfad\ des\ aktuellen\ Verzeichnisses\ auf\ "\ /\ ".\n\n\ @param\ filesystem\ ein\ FileSystem-Objekt,\ das\ das\ Root-Dateisystem\ repr&auml;sentiert\n\ @param\ read_only\ \ falls\ <code>true</code>,\ kann\ auf\ die\ Partition\ nur\ lesend\ zugegriffen\ werden\n
comment7.params=
comment7.target=int\ available()
comment7.text=\n\ Liefert\ den\ freien\ Platz\ innerhalb\ des\ Dateisystems.\n\n\ @return\ der\ freie\ Platz\ in\ Byte\n\ @throws\ jx.fs.NotExistException\n
comment8.params=path
comment8.target=void\ cd(java.lang.String)
comment8.text=\n\ Setzt\ das\ aktuelle\ Verzeichnis\ auf\ den\ angegebenen\ Pfad\ (sofern\ g&uuml;ltig).\n\n\ @param\ path\ der\ Pfad,\ der\ als\ aktuelles\ Verzeichnis\ verwendet\ werden\ soll\n
comment9.params=path\ pathneu
comment9.target=void\ rename(java.lang.String,\ java.lang.String)
comment9.text=\n\ Verschiebt\ die\ Datei\ bzw.\ das\ Verzeichnis\ an\ einen\ anderen\ Ort\ im\ Verzeichnisbaum\ bzw.\ &auml;ndert\ den\ Namen.\n\n\ @param\ path\ \ \ \ der\ Pfad\ des\ Verzeichniseintrags,\ der\ verschoben\ bzw.\ umbenannt\ werden\ soll\n\ @param\ pathneu\ der\ Zielpfad\n\ @exception\ InodeIOException\ \ \ \ \ \ \ \ \ \ falls\ ein\ Fehler\ bei\ der\ Ein-/Ausgabe\ auftritt\n\ @exception\ InodeNotFoundException\ \ \ \ falls\ der\ Verzeichniseintrag\ (und\ damit\ die\ Inode)\ nicht\ gefunden\ werden\ kann\n\ @exception\ NoDirectoryInodeException\ falls\ es\ sich\ beim\ Pfad\ zur\ Datei/zum\ Verzeichnis\ nicht\ um\ ein\ Verzeichnis\ handelt\n\ @exception\ PermissionException\ \ \ \ \ \ \ falls\ es\ sich\ um\ ein\ Rootverzeichnis\ oder\ einen\ Mountpunkt\ handelt\n\ @throws\ jx.fs.NotExistException\n
numComments=23
