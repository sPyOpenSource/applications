#BlueJ class context
comment0.target=Decoder
comment0.text=\n\ This\ class\ is\ the\ base\ class\ for\ decoding\ bytes\ into\ character.\ \n\n\ @version\ 0.0\n\n\ @author\ Aaron\ M.\ Renn\ (arenn@urbanophile.com)\n
comment1.params=
comment1.target=java.lang.String\ getSchemeName()
comment1.text=\n\ This\ method\ returns\ the\ name\ of\ the\ encoding\ scheme\ in\ use\n\n\ @return\ The\ name\ of\ the\ encoding\ scheme\n
comment10.params=
comment10.target=void\ close()
comment10.text=\n\ Closes\ this\ stream\ and\ the\ underlying\ <code>InputStream</code>\n\ \n\ @exception\ IOException\ If\ an\ error\ occurs\n
comment11.params=
comment11.target=boolean\ ready()
comment11.text=\n\ This\ method\ returns\ <code>false</code>\ to\ indicate\ that\ there\ is\ no\n\ guarantee\ this\ stream\ can\ be\ read\ successfully\ without\ blocking.\ \ This\n\ is\ because\ even\ if\ bytes\ are\ available\ from\ the\ underlying\n\ <code>InputStream</code>,\ this\ method\ does\ not\ know\ if\ a\ particular\n\ encoding\ requires\ more\ than\ that\ number\ of\ bytes\ or\ not.\ \ Subclasses\n\ that\ can\ make\ that\ determination\ should\ override\ this\ method.\n\ \n\ @return\ <code>false</code>\ since\ there\ is\ no\ guarantee\ this\ stream\ is\ ready\ to\ be\ read\n\n\ @exception\ IOException\ If\ an\ error\ occurs\n
comment2.params=
comment2.target=java.lang.String\ getSchemeDescription()
comment2.text=\n\ This\ method\ returns\ a\ description\ of\ the\ encoding\ scheme\ in\ use\n\n\ @return\ \n
comment3.params=in
comment3.target=Decoder(java.io.InputStream)
comment3.text=\n\ This\ method\ initializes\ a\ new\ <code>Decoder</code>\ to\ read\ from\ the\n\ specified\ <code>InputStream</code>.\n\n\ @param\ in\ The\ <code>InputStream</code>\ to\ read\ from\n
comment4.params=buf
comment4.target=int\ charsInByteArray(byte[])
comment4.text=\n\ For\ a\ given\ set\ of\ bytes,\ this\ method\ returns\ the\ number\ of\ characters\n\ that\ byte\ array\ will\ translate\ into.\ \ If\ the\ bytes\ do\ not\ all\ translate\ \n\ into\ an\ even\ number\ of\ charcters,\ an\ exception\ will\ be\ thrown.\ \ \ \ \n\ Additionally,\ an\ exception\ may\ be\ thrown\ if\ any\ of\ the\ bytes\ are\ not\n\ valid\ for\ the\ given\ encoding.\ \ (This\ is\ not\ guaranteed\ to\ happen\ however).\n\n\ @param\ buf\ The\ array\ of\ bytes\ to\ determine\ the\ number\ of\ characters\ from.\n\n\ @return\ The\ number\ of\ characters\ than\ can\ be\ decoded\ from\ the\ byte\ array\n\n\ @exception\ CharConversionException\ If\ the\ bytes\ do\ not\ evenly\ translate\ to\ characters,\ or\ an\ invalid\ byte\ is\ encountered.\n
comment5.params=buf\ offset\ len
comment5.target=int\ charsInByteArray(byte[],\ int,\ int)
comment5.text=\n\ For\ a\ <code>len</code>\ bytes\ in\ the\ specified\ array,\ starting\ from\n\ index\ <code>offset</code>,\ this\ method\ returns\ the\ number\ of\ characters\n\ that\ byte\ array\ will\ translate\ into.\ \ If\ the\ bytes\ do\ not\ all\ translate\ \n\ into\ an\ even\ number\ of\ charcters,\ an\ exception\ will\ be\ thrown.\ \ \ \ \n\ Additionally,\ an\ exception\ may\ be\ thrown\ if\ any\ of\ the\ bytes\ are\ not\n\ valid\ for\ the\ given\ encoding.\ \ (This\ is\ not\ guaranteed\ to\ happen\ however).\n\n\ @param\ buf\ The\ array\ of\ bytes\ to\ determine\ the\ number\ of\ characters\ from.\n\ @param\ offset\ The\ index\ to\ start\ examining\ bytes\ from\n\ @param\ len\ The\ number\ of\ bytes\ to\ be\ converted\n\n\ @return\ The\ number\ of\ characters\ than\ can\ be\ decoded\ from\ the\ byte\ array\n\n\ @exception\ CharConversionException\ If\ the\ bytes\ do\ not\ evenly\ translate\ to\ characters,\ or\ an\ invalid\ byte\ is\ encountered.\n
comment6.params=buf
comment6.target=char[]\ convertToChars(byte[])
comment6.text=\n\ This\ method\ converts\ an\ array\ of\ bytes\ to\ chars,\ returning\ the\ result\ in\n\ a\ newly\ allocated\ char\ array.\n\n\ @param\ buf\ The\ byte\ array\ to\ convert\n\n\ @return\ The\ converted\ char\ array\n\n\ @exception\ CharConversionException\ If\ an\ error\ occurs,\ such\ as\ an\ invalid\ byte\ in\ the\ source\ array.\n
comment7.params=buf\ offset\ len
comment7.target=char[]\ convertToChars(byte[],\ int,\ int)
comment7.text=\n\ This\ method\ converts\ <code>len</code>\ bytes\ from\ a\ specified\ array\ to\n\ characters\ starting\ at\ index\ <code>offset</code>\ into\ the\ array.\ \ The\n\ results\ are\ returned\ in\ a\ newly\ allocated\ char\ array.\n\n\ @param\ buf\ The\ byte\ array\ to\ convert\n\ @param\ offset\ The\ index\ into\ the\ array\ to\ start\ converting\ from\n\ @param\ len\ The\ number\ of\ bytes\ to\ convert\n\n\ @return\ The\ converted\ char\ array\n\n\ @exception\ CharConversionException\ If\ an\ error\ occurs,\ such\ as\ an\ invalid\ byte\ in\ the\ source\ array.\n
comment8.params=buf\ cbuf\ cbuf_offset
comment8.target=char[]\ convertToChars(byte[],\ char[],\ int)
comment8.text=\n\ This\ method\ converts\ all\ the\ bytes\ in\ the\ specified\ array\ to\ characters\n\ and\ stores\ them\ into\ the\ supplied\ character\ array\ starting\ at\ index\n\ <code>cbuf_offset</code>\ into\ the\ destination\ char\ array.\ \ The\ array\ itself\n\ is\ returned\ as\ a\ convenience\ for\ passing\ to\ other\ methods.\n\n\ Note\ that\ there\ must\ be\ enough\ space\ in\ the\ destination\ array\ to\ hold\n\ all\ the\ converted\ bytes,\ or\ an\ exception\ will\ be\ thrown.\n\n\ @param\ buf\ The\ byte\ array\ to\ convert\n\ @param\ cbuf\ The\ char\ array\ to\ store\ converted\ characters\ into\n\ @param\ cbuf_offset\ The\ index\ into\ the\ char\ array\ to\ start\ storing\ converted\ characters.\n\n\ @return\ The\ char\ array\ passed\ by\ the\ caller\ as\ a\ param,\ now\ filled\ with\ converted\ characters.\n\n\ @exception\ ArrayIndexOutOfBoundsException\ If\ the\ destination\ char\ array\ is\ not\ big\ enough\ to\ hold\ all\ the\ converted\ characters\n\ @exception\ CharConversionException\ If\ an\ error\ occurs,\ such\ as\ an\ invalid\ byte\ in\ the\ source\ array.\n
comment9.params=buf\ buf_offset\ len\ cbuf\ cbuf_offset
comment9.target=char[]\ convertToChars(byte[],\ int,\ int,\ char[],\ int)
comment9.text=\n\ This\ method\ converts\ <code>len</code>\ bytes\ in\ the\ specified\ array\ to\ \n\ characters\ starting\ at\ position\ <code>buf_offset</code>\ in\ the\ array\n\ and\ stores\ them\ into\ the\ supplied\ character\ array\ starting\ at\ index\n\ <code>cbuf_offset</code>\ into\ the\ destination\ char\ array.\ \ The\ array\ itself\n\ is\ returned\ as\ a\ convenience\ for\ passing\ to\ other\ methods.\n\n\ Note\ that\ there\ must\ be\ enough\ space\ in\ the\ destination\ array\ to\ hold\n\ all\ the\ converted\ bytes,\ or\ an\ exception\ will\ be\ thrown.\n\n\ @param\ buf\ The\ byte\ array\ to\ convert\n\ @param\ buf_offset\ The\ index\ into\ the\ byte\ array\ to\ start\ converting\ from\n\ @param\ len\ The\ number\ of\ bytes\ to\ convert\n\ @param\ cbuf\ The\ char\ array\ to\ store\ converted\ characters\ into\n\ @param\ cbuf_offset\ The\ index\ into\ the\ char\ array\ to\ start\ storing\ converted\ characters.\n\n\ @return\ The\ char\ array\ passed\ by\ the\ caller\ as\ a\ param,\ now\ filled\ with\ converted\ characters.\n\n\ @exception\ ArrayIndexOutOfBoundsException\ If\ the\ destination\ char\ array\ is\ not\ big\ enough\ to\ hold\ all\ the\ converted\ characters\n\ @exception\ CharConversionException\ If\ an\ error\ occurs,\ such\ as\ an\ invalid\ byte\ in\ the\ source\ array.\n
numComments=12
