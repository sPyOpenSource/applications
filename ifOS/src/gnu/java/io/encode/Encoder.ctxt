#BlueJ class context
comment0.target=Encoder
comment0.text=\n\ This\ class\ is\ the\ base\ class\ for\ encoding\ characters\ into\ bytes.\ \n\n\ @version\ 0.0\n\n\ @author\ Aaron\ M.\ Renn\ (arenn@urbanophile.com)\n
comment1.params=
comment1.target=java.lang.String\ getSchemeName()
comment1.text=\n\ This\ method\ returns\ the\ name\ of\ the\ encoding\ scheme\ in\ use\n\n\ @return\ The\ name\ of\ the\ encoding\ scheme\n
comment10.params=
comment10.target=void\ close()
comment10.text=\n\ Closes\ this\ stream\ and\ the\ underlying\ <code>OutputStream</code>\n\ \n\ @exception\ IOException\ If\ an\ error\ occurs\n
comment11.params=
comment11.target=void\ flush()
comment11.text=\n\ This\ method\ flushes\ any\ buffered\ bytes\ to\ the\ underlying\ stream.\n\n\ @exception\ IOException\ If\ an\ error\ occurs\n
comment12.params=bad_char
comment12.target=void\ setBadCharValue(char)
comment12.text=\n\ This\ method\ sets\ that\ character\ that\ will\ be\ used\ when\ converting\n\ a\ Unicode\ character\ that\ is\ invalid\ in\ the\ current\ encoding.\ \ If\ this\ \n\ is\ set,\ it\ will\ be\ substituted\ for\ the\ bad\ value.\ \ Otherwise,\ an\n\ exception\ will\ be\ thrown.\ \ Note\ that\ this\ character\ itself\ must\ be\n\ valid\ for\ the\ current\ encoding.\ \ If\ it\ is\ not,\ an\ exception\ is\ thrown.\n\n\ @param\ bad_char\ The\ substitute\ for\ any\ bad\ characters\ found.\n\n\ @exception\ CharConversionException\ If\ the\ bad\ char\ value\ is\ not\ valid\ in\ this\ encoding\n
comment2.params=
comment2.target=java.lang.String\ getSchemeDescription()
comment2.text=\n\ This\ method\ returns\ a\ description\ of\ the\ encoding\ scheme\ in\ use\n\n\ A\ description\ of\ the\ decoding\ scheme.\n\ @return\ \n
comment3.params=out
comment3.target=Encoder(java.io.OutputStream)
comment3.text=\n\ This\ method\ initializes\ a\ new\ <code>Encoder</code>\ to\ write\ to\ the\n\ specified\ <code>OutputStream</code>.\n\n\ @param\ out\ The\ <code>OutputStream</code>\ to\ read\ from\n
comment4.params=buf
comment4.target=int\ bytesInCharArray(char[])
comment4.text=\n\ For\ a\ given\ set\ of\ chars,\ this\ method\ returns\ the\ number\ of\ bytes\n\ that\ array\ will\ translate\ into.\ \ \n\n\ If\ a\ Unicode\ character\ that\ is\ not\ valid\ in\ the\ current\ encoding\n\ scheme\ is\ encountered,\ this\ method\ may\ throw\ an\ exception.\ \ But\ is\n\ is\ not\ required\ to.\ \ This\ method\ cannot\ be\ used\ to\ validate\ an\n\ array\ of\ chars\ for\ a\ particular\ encoding.\n\n\ @param\ buf\ The\ array\ of\ chars\ to\ determine\ the\ number\ of\ bytes\ from.\n\n\ @return\ The\ number\ of\ bytes\ than\ will\ be\ encoded\ from\ the\ char\ array\n\n\ @exception\ CharConversionException\ If\ bad\ char\ value\ are\ encountered\ for\ this\ encoding\n
comment5.params=buf\ offset\ len
comment5.target=int\ bytesInCharArray(char[],\ int,\ int)
comment5.text=\n\ For\ <code>len</code>\ chars\ in\ the\ specified\ array,\ starting\ from\n\ index\ <code>offset</code>,\ this\ method\ returns\ the\ number\ of\ bytes\n\ that\ char\ array\ will\ translate\ into.\ \ \n\n\ If\ a\ Unicode\ character\ that\ is\ not\ valid\ in\ the\ current\ encoding\n\ scheme\ is\ encountered,\ this\ method\ may\ throw\ an\ exception.\ \ But\ is\n\ is\ not\ required\ to.\ \ This\ method\ cannot\ be\ used\ to\ validate\ an\n\ array\ of\ chars\ for\ a\ particular\ encoding.\n\n\ @param\ buf\ The\ array\ of\ chars\ to\ determine\ the\ number\ of\ bytes\ from.\n\ @param\ offset\ The\ index\ to\ start\ examining\ chars\ from\n\ @param\ len\ The\ number\ of\ chars\ to\ be\ converted\n\n\ @return\ The\ number\ of\ bytes\ than\ can\ be\ encoded\ from\ the\ char\ array\n\n\ @exception\ CharConversionException\ If\ bad\ char\ value\ are\ encountered\ for\ this\ encoding\n
comment6.params=buf
comment6.target=byte[]\ convertToBytes(char[])
comment6.text=\n\ This\ method\ converts\ an\ array\ of\ chars\ to\ bytes,\ returning\ the\ result\ in\n\ a\ newly\ allocated\ byte\ array.\n\n\ @param\ buf\ The\ char\ array\ to\ convert\n\n\ @return\ The\ converted\ bytes\ array\n\n\ @exception\ CharConversionException\ If\ an\ error\ occurs\n
comment7.params=buf\ offset\ len
comment7.target=byte[]\ convertToBytes(char[],\ int,\ int)
comment7.text=\n\ This\ method\ converts\ <code>len</code>\ chars\ from\ a\ specified\ array\ to\n\ bytes\ starting\ at\ index\ <code>offset</code>\ into\ the\ array.\ \ The\n\ results\ are\ returned\ in\ a\ newly\ allocated\ byte\ array.\n\n\ @param\ buf\ The\ char\ array\ to\ convert\n\ @param\ offset\ The\ index\ into\ the\ array\ to\ start\ converting\ from\n\ @param\ len\ The\ number\ of\ chars\ to\ convert\n\n\ @return\ The\ converted\ byte\ array\n\n\ @exception\ CharConversionException\ If\ an\ error\ occurs.\n
comment8.params=buf\ bbuf\ bbuf_offset
comment8.target=byte[]\ convertToBytes(char[],\ byte[],\ int)
comment8.text=\n\ This\ method\ converts\ all\ the\ chars\ in\ the\ specified\ array\ to\ bytes\n\ and\ stores\ them\ into\ the\ supplied\ byte\ array\ starting\ at\ index\n\ <code>bbuf_offset</code>\ into\ the\ destination\ byte\ array.\ \ The\ array\ itself\n\ is\ returned\ as\ a\ convenience\ for\ passing\ to\ other\ methods.\n\n\ Note\ that\ there\ must\ be\ enough\ space\ in\ the\ destination\ array\ to\ hold\n\ all\ the\ converted\ chars,\ or\ an\ exception\ will\ be\ thrown.\n\n\ @param\ buf\ The\ char\ array\ to\ convert\n\ @param\ bbuf\ The\ byte\ array\ to\ store\ converted\ characters\ into\n\ @param\ bbuf_offset\ The\ index\ into\ the\ byte\ array\ to\ start\ storing\ converted\ bytes.\n\n\ @return\ The\ byte\ array\ passed\ by\ the\ caller\ as\ a\ param,\ now\ filled\ with\ converted\ bytes.\n\n\ @exception\ ArrayIndexOutOfBoundsException\ If\ the\ destination\ byte\ array\ is\ not\ big\ enough\ to\ hold\ all\ the\ converted\ bytes\n\ @exception\ CharConversionException\ If\ any\ other\ error\ occurs.\n
comment9.params=buf\ buf_offset\ len\ bbuf\ bbuf_offset
comment9.target=byte[]\ convertToBytes(char[],\ int,\ int,\ byte[],\ int)
comment9.text=\n\ This\ method\ converts\ <code>len</code>\ chars\ in\ the\ specified\ array\ to\ \n\ bytes\ starting\ at\ position\ <code>buf_offset</code>\ in\ the\ array\n\ and\ stores\ them\ into\ the\ supplied\ byte\ array\ starting\ at\ index\n\ <code>bbuf_offset</code>\ into\ the\ destination\ bytes\ array.\ \ The\ array\ itself\n\ is\ returned\ as\ a\ convenience\ for\ passing\ to\ other\ methods.\n\n\ Note\ that\ there\ must\ be\ enough\ space\ in\ the\ destination\ array\ to\ hold\n\ all\ the\ converted\ bytes,\ or\ an\ exception\ will\ be\ thrown.\n\n\ @param\ buf\ The\ char\ array\ to\ convert\n\ @param\ buf_offset\ The\ index\ into\ the\ char\ array\ to\ start\ converting\ from\n\ @param\ len\ The\ number\ of\ chars\ to\ convert\n\ @param\ bbuf\ The\ byte\ array\ to\ store\ converted\ bytes\ into\n\ @param\ bbuf_offset\ The\ index\ into\ the\ byte\ array\ to\ start\ storing\ converted\ bytes.\n\n\ @return\ The\ byte\ array\ passed\ by\ the\ caller\ as\ a\ param,\ now\ filled\ with\ converted\ bytes.\n\n\ @exception\ ArrayIndexOutOfBoundsException\ If\ the\ destination\ byte\ array\ is\ not\ big\ enough\ to\ hold\ all\ the\ converted\ bytes.\n\ @exception\ CharConversionException\ If\ any\ other\ error\ occurs.\n
numComments=13
