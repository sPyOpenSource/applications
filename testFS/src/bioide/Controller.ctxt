#BlueJ class context
comment0.target=Controller
comment0.text=\n\ Represents\ one\ IDE\ controller.\n\ An\ IDE\ controller\ can\ contain\ up\ to\ two\ Drives.\n\ @author\ Michael\ Golm\n\ @author\ Andreas\ Weissel\n
comment1.params=ide\ index
comment1.target=Controller(IDEDeviceImpl,\ int)
comment10.params=value
comment10.target=void\ setCTLReg(byte)
comment11.params=
comment11.target=boolean\ statusBusy()
comment12.params=
comment12.target=byte\ getStatus()
comment13.params=buffer\ offset\ wcount
comment13.target=void\ inputData(jx.zero.Memory,\ int,\ int)
comment13.text=transfer\ data\ from\ controller\ to\ main\ memory\ using\ programmed\ I/O
comment14.params=buffer\ offset\ wcount
comment14.target=void\ outputData(jx.zero.Memory,\ int,\ int)
comment14.text=transfer\ data\ from\ main\ memory\ to\ controller\ using\ programmed\ I/O
comment15.params=good\ bad\ timeoutMillis
comment15.target=boolean\ waitFor(int,\ int,\ int)
comment15.text=\n\ Wait\ until\ controller\ status\ is\ good.\n\n\ @param\ good\ \ \ \ state\ to\ wait\ for\n\ @param\ bad\ \ \ \ \ bad\ state\ (should\ not\ happen)\n\ @param\ timeout\ timeout\ in\ millisec\n\ @return\ <code>false</code>,\ if\ timeout\ or\ bad\ status,\ else\ <code>true</code>.\n
comment16.params=sec\ msec
comment16.target=void\ setTimeout(int,\ int)
comment16.text=\n\ Activate\ the\ timeout\ that\ terminates\ the\ operation\ after\ a\ certain\ time.\n
comment17.params=
comment17.target=void\ stopTimeout()
comment17.text=\n\ Deactivate\ the\ timeout\ if\ operation\ was\ completed\ before\ timeout\n
comment18.params=newOperation\ front
comment18.target=void\ queueOperation(Operation,\ boolean)
comment18.text=\n\ Enqueue\ operation.\n\ If\ controller\ is\ ready,\ operation\ starts\ immediately.\n\n\ @param\ newOperation\ the\ operation\n\ @param\ front\ \ \ \ \ \ \ \ \ <code>true</code>\ prepend\ at\ front\ of\ queue\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <code>false</code>\ append\ at\ end\ of\ queue\n
comment19.params=
comment19.target=void\ nextOperation()
comment19.text=\n\ Start\ next\ operation\ in\ queue.\ Return\ immediately\ if\ queue\ is\ empty.\n
comment2.params=value
comment2.target=void\ setFeatureReg(byte)
comment20.params=
comment20.target=boolean\ identify()
comment20.text=\n\ Test\ if\ controller\ exists\ and\ what\ drives\ are\ connected.\n
comment21.params=
comment21.target=void\ setup()
comment21.text=\n\ Setup\ controller\:\ install\ IRQ\ handler\n
comment22.params=drive\ msg\ stat
comment22.target=void\ ideError(Drive,\ java.lang.String,\ byte)
comment22.text=\n\ Error\ occured.\ Reset\ controller\ and/or\ terminate\ running\ operation.\n
comment23.params=buffer\ addrcount
comment23.target=boolean\ buildDMATable(jx.zero.Memory,\ int)
comment23.text=\n\ Initialize\ a\ DMA\ table.\n
comment24.params=base
comment24.target=void\ initTritonDma(int)
comment24.text=\n\ Reserver\ DMA\ registers\ and\ create\ DMA\ table\n
comment25.params=port\ m\ offset\ wcount
comment25.target=void\ inputData(int,\ jx.zero.Memory,\ int,\ int)
comment26.params=port\ m\ offset\ wcount
comment26.target=void\ outputData(int,\ jx.zero.Memory,\ int,\ int)
comment27.params=
comment27.target=boolean\ isPresent()
comment28.params=
comment28.target=Operation\ getCurrentOperation()
comment29.params=
comment29.target=java.lang.String\ getName()
comment3.params=value
comment3.target=void\ setCountReg(byte)
comment4.params=value
comment4.target=void\ setSectorReg(byte)
comment5.params=value
comment5.target=void\ setLoCylReg(byte)
comment6.params=value
comment6.target=void\ setHiCylReg(byte)
comment7.params=value
comment7.target=void\ setLDHReg(byte)
comment8.params=
comment8.target=byte\ getLDHReg()
comment9.params=value
comment9.target=void\ setCommandReg(byte)
numComments=30
